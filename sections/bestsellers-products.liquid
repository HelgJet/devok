{{ 'component-loading-overlay.css' | asset_url | stylesheet_tag }}
{{ 'component-rating.css' | asset_url | stylesheet_tag }}
{{ 'component-card.css' | asset_url | stylesheet_tag }}
{{ 'component-price.css' | asset_url | stylesheet_tag }}

{%- style -%}
  #bs-products-container-{{ section.id }} {
    --page-width: {{ section.settings.page_width | divided_by: 10 }}rem;
  }

  #bs-products-container-{{ section.id }}  {
    --grid-desktop-horizontal-spacing: {{ section.settings.spacing_grid_horizontal }}px;
  }

  .section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
    padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
  }

  @media screen and (min-width: 750px) {
    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
  }
{%- endstyle -%}

{%- liquid
 assign current_product = product
 assign collection = current_product.collections.first
-%}

{{ collection.handle | json }}

{% if collection and collection.products_count > 1 %}
  {%- liquid
    assign limit = section.settings.max_limit | plus: 1
    assign limit_js = section.settings.max_limit | plus: 0
    assign current_collection_handle = collection.handle
    assign current_products_list = collections[current_collection_handle].products
    assign tags_contains = false
    if section.settings.tags_filter != blank
      assign tags_contains = true
      assign tags_filter = section.settings.tags_filter | split: ','
      assign tags_filter_js = section.settings.tags_filter | split: ', '
    endif

    assign columns_mobile_int = section.settings.columns_mobile | plus: 0
    assign columns_desktop_int = section.settings.columns_desktop | plus: 0
  -%}
  <div id="bs-products-container-{{ section.id }}"> 
 <div class="section-{{ section.id }}-padding isolate{% if section.settings.use_section_width %} page-width{% endif %}">
  <bestsellers-products
    data-section="{{ section.id }}"
    data-slider-per-mobile="{{ columns_mobile_int }}"
    data-slider-per-desktop="{{ columns_desktop_int }}"
    init="false"
  >

    {%- unless section.settings.title == blank -%}
      <h2>
        {{ section.settings.title | escape }}
      </h2>
    {%- endunless -%}
    <swiper-container id="BestsellerSliderProducts">
    
    </swiper-container>
 
  </bestsellers-products>
   </div>
      </div>
  <script>

    
//fetching best selling products from the same category
async function fetchBestSellingProducts(category, maxLimit, tagsProduct, currentProductHandle) {
    const storefrontAccessToken = '374602b3d4bb8103e75becaae1d47c10';
    const domain = 'devpeview.myshopify.com';
    const query = `
    query FetchBestSellingProducts($category: String!) {
      collectionByHandle(handle: $category) { 
        title
        products(first: 30, sortKey: BEST_SELLING) {
          edges {
            node {
              id
              handle
              tags
            }
          }
        }
      }
    }`;

    try {
        const response = await fetch(`https://${domain}/api/2021-10/graphql.json`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Shopify-Storefront-Access-Token': storefrontAccessToken,
            },
            body: JSON.stringify({
                query,
                variables: { category: category },
            }),
        });
        
        if (!response.ok) throw new Error('Network response was not ok.');

        const { data } = await response.json();
      
        let products = data.collectionByHandle.products.edges.map(edge => edge.node);

        // // Apply tag filter only if tagsProduct is not empty
        if (tagsProduct?.trim().length > 0) {
            const tagsArray = tagsProduct.toLowerCase().split(',').map(tag => tag.trim());
            products = products.filter(product => 
                product.tags.some(tag => tagsArray.includes(tag.toLowerCase()))
            );
        } 
      
        // Filter out the current product   
        products = products.filter(product => product.handle !== currentProductHandle);
        const limitedProducts = products.slice(0, maxLimit);

       // Set localStorage with product handles
        const productHandles = limitedProducts.map(product => product.handle);
        localStorage.setItem('productHandles', JSON.stringify(productHandles));
      
    } catch (error) {
        console.error('Error fetching products:', error);
    }
}

document.addEventListener('DOMContentLoaded', async () => {
    const category = '{{ current_collection_handle }}';
    const maxLimit = parseInt('{{ limit_js }}', 10); 
    const currentProductHandle = '{{ current_product.handle }}';
    let productTags = '{{ tags_filter_js }}';
    productTags = productTags ?? "";
    await fetchBestSellingProducts(category, maxLimit, productTags, currentProductHandle);
});


// Custom web component for set template card product and init slider     
class BestsellersProducts extends HTMLElement {
   constructor() {
    super();
 
    this.slider = this.querySelector('#BestsellerSliderProducts');
    this.selectors = {
      itemProduct: '[product-template-js]', 
      sectionId: this.dataset.section,
      perDesktop: parseInt(this.dataset.sliderPerDesktop),
      perMobile: parseInt(this.dataset.sliderPerMobile),
    };   
  }

  connectedCallback() { 
      const handleIntersection = (entries, observer) => {
        if (!entries[0].isIntersecting) return;
        observer.unobserve(this);
        this.loadBestsellersProducts();  
      }
      new IntersectionObserver(handleIntersection.bind(this), {rootMargin: '0px 0px 400px 0px'}).observe(this);
  }

  loadBestsellersProducts() {
    const productHandles = this.getBestsellersProductHandles();
    if (productHandles.length > 0) {
      this.setTemplate(productHandles);  
    } 
  } 

  getBestsellersProductHandles() {
    const bestsellers = JSON.parse(localStorage.getItem('productHandles')) || [];
    const filteredBestsellers = bestsellers.filter(item => item !== undefined);
    return filteredBestsellers;
  }
  
    fetchProductHTML = (handle) => {
      const productUrl = `/products/${handle}?view=litecard`; 
      return fetch(productUrl)
      .then((res) => res.text())  
      .then((res) => {
         const text = res;
         const parser = new DOMParser(); 
         const htmlDocument = parser.parseFromString(text, 'text/html');
         const itemProduct = htmlDocument.documentElement.querySelector(this.selectors.itemProduct); 
         if (itemProduct) {
            return itemProduct.outerHTML;
          } else {
            console.error(`[Bestsellers Product] No element found for handle: ${handle}`);
            return ''; // or handle this case in a way that makes sense for your application
        } 
      }) 
      .catch((err) => console.error(`[Bestsellers Product] Failed to load content for handle: ${handle}`, err));
   }  
   
   async setTemplate(handles){ 
      const requests = handles.map(this.fetchProductHTML); 
      const responses = await Promise.all(requests); 
      const itemProducts = responses.map((item, index) => `<swiper-slide id="Slide-${this.selectors.sectionId}-${index + 1}" class="swiper-slide">${item}</swiper-slide>`).join('');
      this.slider.innerHTML = '';
      this.classList.add('bestsellers--loaded');
      this.slider.innerHTML = itemProducts;
      this.initSlider(handles);   
   }  

  initSlider(elements) {
  
       const swiperEl = document.querySelector('#BestsellerSliderProducts');
       Object.assign(swiperEl, {
         slidesPerView: this.selectors.perMobile,
         spaceBetween: 16,
         navigation: true,
         breakpoints: {
           640: {
             slidesPerView: 2.5,
             spaceBetween: 16,
           },
           768: {
             slidesPerView: 3.5,
             spaceBetween: 24,
           },
           1024: {
             slidesPerView: this.selectors.perDesktop,
             spaceBetween: 24, 
           },
         },
       });
       swiperEl.initialize();
 }
}

customElements.define('bestsellers-products', BestsellersProducts);
</script>

<script src="https://cdn.jsdelivr.net/npm/swiper@11/swiper-element-bundle.min.js" defer></script>
  
{% endif %}

{% schema %}
{
  "name": "Bestseller Products",
  "tag": "section",
  "limit": 1,
  "class": "section bestseller-products",
  "enabled_on": {
    "templates": ["product"]
  },
  "settings": [
    {
      "type": "range",
      "id": "page_width",
      "min": 1000,
      "max": 1920,
      "step": 10,
      "default": 1200,
      "unit": "px",
      "label": "t:settings_schema.layout.settings.page_width.label"
    },

    {
      "type": "checkbox",
      "id": "use_section_width",
      "label": "Use section width",
      "default": true
    },

    {
      "type": "text",
      "id": "title",
      "default": "Your KAYA Bestseller Products",
      "label": "Title"
    },

     {
      "type": "range",
      "id": "max_limit",
      "min": 10,
      "max": 30,
      "step": 5,
      "default": 10,
      "label": "Max Limit Products"
    },

     {
      "type": "text",
      "id": "tags_filter",
      "label": "Filter by tags (separate by ',')"
     },

     {
      "type": "range",
      "id": "columns_desktop",
      "min": 3,
      "max": 6,
      "step": 0.5,
      "default": 5,
      "label": "Columns desktop"
    },


    {
      "type": "header",
      "content": "Header mobile content"
    },

     {
      "type": "range",
      "id": "columns_mobile",
      "min": 1,
      "max": 3,
      "step": 0.5,
      "default": 1.5,
      "label": "Columns mobile"
    },
    {
      "type": "header",
      "content": "Section padding"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Section padding top",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Section padding bottom",
      "default": 36
    }
  ],
  "presets": [
    {
      "name": "Bestseller Products"
	  }
  ]
}
{% endschema %}
