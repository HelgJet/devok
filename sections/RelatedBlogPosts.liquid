{% comment %}
  Dynamically fetches related blog posts based on product metafields across all blogs.
  Falls back to globally defined posts if no specific metafields are present.
{% endcomment %}

<script>
// Ensure the theme object exists on the window to avoid errors
window.theme = window.theme || {};

window.theme.initWhenVisible = function(options) {
  const { threshold = 100, callback, element } = options;

  // Create an IntersectionObserver to detect when the element is in view
  const observer = new IntersectionObserver((entries, observer) => {
    for (const entry of entries) {
      // Check if the element is intersecting and the callback is a function
      if (entry.isIntersecting && typeof callback === 'function') {
        callback();
        observer.unobserve(entry.target); // Stop observing the element after the callback has been executed
      }
    }
  }, { rootMargin: `0px 0px ${threshold}px 0px` });

  observer.observe(element); // Start observing the specified element
};

</script>

{%- if section.settings.blog.articles != blank or product.metafields.custom.related_post_handles.value.size > 0 -%}
  {% comment %} Dynamicaly styles for section layout {% endcomment %}
  {%- style -%}
    #RelatedBlogPosts-{{ section.id }} {
      --page-width: {{ section.settings.page_width | divided_by: 10 }}rem;
    }

    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
      padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
    }

    @media screen and (min-width: 750px) {
      .section-{{ section.id }}-padding {
        padding-top: {{ section.settings.padding_top }}px;
        padding-bottom: {{ section.settings.padding_bottom }}px;
      }
      {% if section.settings.use_section_width == blank %}
        #RelatedBlogPosts-{{ section.id }} .swiper-hidden {
          padding: 0;
          margin-left: max(5rem, calc((100vw - var(--page-width) + 10rem - 2.4rem) / 2));
        }
      {% endif %}
    }
  {%- endstyle -%}

{% comment %} Define product with needed meta {% endcomment %}

  {% liquid
    assign found_posts_meta = false
    if product.metafields.custom.related_post_handles.value.size > 0
      assign found_posts_meta = true
      assign related_post_handles = product.metafields.custom.related_post_handles.value
    endif
  %}

  <div id="RelatedBlogPosts-{{ section.id }}" class="related-posts">
    <div class="section-{{ section.id }}-padding isolate{% if section.settings.use_section_width %} page-width{% endif %}">
      <div class="swiper-hidden">
      
      {%- if section.settings.title != blank or section.settings.description != blank-%}
        <div class="section-heading"> 
          {%- if section.settings.title != blank -%}
            <h2>
              {{ section.settings.title | escape }}
            </h2>
          {%- endif -%}
          {%- if section.settings.description != blank -%}
            <p>
              {{ section.settings.description }}
            </p>
          {%- endif -%}
        </div>
      {%- endif -%}

        

        <swiper-container
          class="related-posts__articles"
          id="RelatedBlogPostsSwiper-{{ section.id }}"
          navigation-next-el="#related-posts--next-button-{{ section.id }}"
          navigation-prev-el="#related-posts--prev-button-{{ section.id }}"
        >

        {% comment %} Get articles from section settings if product has not needed metadata {% endcomment %}
          {% if found_posts_meta == false %}
            {%- for article in section.settings.blog.articles limit: section.settings.post_limit -%}
              {%- if article and article != empty -%}
                <swiper-slide lazy="true">
                  <div id="{{ article.id }}" class="related-posts__article">
                    <div class="article-card-wrapper">
                      <div class="article-card">
                        {%- if article.image -%}
                          <div class="card__image">
                            <picture>
                              <source
                                media="(max-width: 1000px)"
                                srcset="
                                  {{ article.image | image_url: width: 300 }} 1x,
                                  {{ article.image | image_url: width: 600 }} 2x,
                                "
                              >
                              {{
                                article.image
                                | image_url: width: 1000
                                | image_tag:
                                  widths: '300, 600, 1000',
                                  sizes: '(min-width: 1000px) 760px, (min-width: 800px) calc(100vw - 380px), (min-width: 400px) 298px, 78.75vw',
                                  loading: 'lazy',
                                  class: 'img-fluid'
                              }}
                            </picture>
                          </div>
                        {%- endif -%}

                        <div class="card__information">
                          <h3 class="card__heading">
                            <a href="{{ article.url }}" class="full-unstyled-link">
                              {{ article.title | truncate: 50 | escape }}
                            </a>
                          </h3>
                        </div>
                      </div>
                    </div>
                  </div>
                </swiper-slide>
              {%- endif -%}
            {% endfor %}
          {% else %}

           {% comment %} 
           Get articles if product has metadata 
           Get handle to all the blogs via linklist 'blogs'
           {% endcomment %}

            {% for link in linklists.blogs.links %}
            
              {% assign blog = link.object %}
              {% for article in blogs[blog.handle].articles %}
                {% for handle in related_post_handles %}

                  {% comment %} Get article handle without blog.handle via splitting by '/' and get last part {% endcomment %}
                  {% assign article_parts = article.handle | split: '/' %}
                  {% assign modified_article_handle = article_parts.last %}

                  {% comment %} Equal article handle with handle from metadata {% endcomment %}

                  {% if handle == modified_article_handle %}
                    {%- if article and article != empty -%}
                      <swiper-slide lazy="true">
                        <div id="{{ article.id }}" class="related-posts__articles">
                          <div class="article-card-wrapper">
                            <div class="article-card">
                              {%- if article.image -%}
                                <div class="card__image">
                                  <picture>
                                    <source
                                      media="(max-width: 1000px)"
                                      srcset="
                                        {{ article.image | image_url: width: 300 }} 1x,
                                        {{ article.image | image_url: width: 600 }} 2x,
                                      "
                                    >
                                    {{
                                      article.image
                                      | image_url: width: 1000
                                      | image_tag:
                                        widths: '300, 600, 1000',
                                        sizes: '(min-width: 1000px) 760px, (min-width: 800px) calc(100vw - 380px), (min-width: 400px) 298px, 78.75vw',
                                        loading: 'lazy',
                                        class: 'img-fluid'
                                    }}
                                  </picture>
                                </div>
                              {%- endif -%}

                              <div class="card__information">
                                <h3 class="card__heading">
                                  <a href="{{ article.url }}" class="full-unstyled-link">
                                    {{ article.title | truncate: 50 | escape }}
                                  </a>
                                </h3>
                              </div>
                            </div>
                          </div>
                        </div>
                      </swiper-slide>
                    {% endif %}
                  {% endif %}
                {% endfor %}
              {% endfor %}
            {% endfor %}
          {% endif %}
        </swiper-container>
        <button id="related-posts--next-button-{{ section.id }}" class="swiper-button swiper-button-next">
          <svg
            width="11"
            height="20"
            viewBox="0 0 11 20"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
            class="__web-inspector-hide-shortcut__"
          >
            <path d="M0.38296 20.0762C0.111788 19.805 0.111788 19.3654 0.38296 19.0942L9.19758 10.2796L0.38296 1.46497C0.111788 1.19379 0.111788 0.754138 0.38296 0.482966C0.654131 0.211794 1.09379 0.211794 1.36496 0.482966L10.4341 9.55214C10.8359 9.9539 10.8359 10.6053 10.4341 11.007L1.36496 20.0762C1.09379 20.3474 0.654131 20.3474 0.38296 20.0762Z" fill="currentColor"></path>
          </svg>
        </button>
        <button id="related-posts--prev-button-{{ section.id }}" class="swiper-button swiper-button-prev">
          <svg
            width="11"
            height="20"
            viewBox="0 0 11 20"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
            class="__web-inspector-hide-shortcut__"
          >
            <path d="M0.38296 20.0762C0.111788 19.805 0.111788 19.3654 0.38296 19.0942L9.19758 10.2796L0.38296 1.46497C0.111788 1.19379 0.111788 0.754138 0.38296 0.482966C0.654131 0.211794 1.09379 0.211794 1.36496 0.482966L10.4341 9.55214C10.8359 9.9539 10.8359 10.6053 10.4341 11.007L1.36496 20.0762C1.09379 20.3474 0.654131 20.3474 0.38296 20.0762Z" fill="currentColor"></path>
          </svg>
        </button>
      </div>
    </div>
  </div>


  {% comment %} Style for article card {% endcomment %}
  <style>
    .related-posts .full-unstyled-link {
      text-decoration: none;
      color: currentColor;
      display: block;
    }

    .related-posts .card__heading {
      margin-top: 0;
    }
    .related-posts .article-card-wrapper {
      position: relative;
      overflow: hidden;
    }

    .related-posts .article-card-wrapper:hover img {
      opacity: 0.88;
    }

    .related-posts .card__heading a:after {
      bottom: 0;
      content: "";
      left: 0;
      position: absolute;
      right: 0;
      top: 0;
      z-index: 1;
    }

    @media screen and (min-width: 750px) {
      .related-posts .card__information {
        padding-bottom: 1.7rem;
        padding-top: 1.7rem;
      }
    }

    .related-posts .card__information {
      padding: 1.3rem 1rem;
    }

    .related-posts .swiper-hidden {
      position: relative;
      padding-left: 1.6rem;
    }

    .related-posts .swiper-button {
      width: 4.4rem;
      height: 4.4rem;
      background-color: #fff;
      border-radius: 50%;
      color: #000;
      box-shadow: none;
      border: none;
      top: 36%;
      position: absolute;
      z-index: 10;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: opacity 0.2s ease;
    }

    @media screen and (min-width: 750px) {
      .related-posts .swiper-button {
        width: 6.4rem;
        height: 6.4rem;
        top: 42%;
      }
    }

    .related-posts .swiper-button.swiper-button-disabled {
      display: none;
    }

    .related-posts .swiper-button svg {
      width: 1.2rem;
    }

    .related-posts .swiper-button.swiper-button-prev svg path {
      transform-origin: center center;
      transform: rotate(180deg);
    }
    .related-posts .swiper-button:hover {
      opacity: 0.88;
    }
    .related-posts .swiper-button.swiper-button-next,
    .related-posts .swiper-rtl .swiper-button.swiper-button-prev {
      left: auto;
      right: 5%;
    }
    .related-posts .swiper-button.swiper-button-prev,
    .related-posts .swiper-rtl .swiper-button.swiper-button-next {
      right: auto;
      left: 5%;
    }
    .img-fluid {
      max-width: 100%;
      height: auto;
      transition: opacity 0.2s ease;
    }
  </style>


  {% comment %} Init swiper carousel {% endcomment %}

  <script>
    const swiperEl = document.querySelector("#RelatedBlogPostsSwiper-{{ section.id }}");
    Object.assign(swiperEl, {
      slidesPerView: 1.5,
      spaceBetween: 16,
      breakpoints: {
        640: {
          slidesPerView: 1.8,
          spaceBetween: 16,
        },
        768: {
          slidesPerView: 2.2,
          spaceBetween: 20,
        },
        1024: {
          slidesPerView: 2.5,
          spaceBetween: 24,
        },
      },
    });
  </script>

  <script src="https://cdn.jsdelivr.net/npm/swiper@11/swiper-element-bundle.min.js" defer></script>
{% endif %}
{% comment %}
<div class="page-width">
  <h2>Related blogs API</h2>
<related-posts id="related-posts-container" class="related-posts grid" product-id="{{ product.id }}"></related-posts>
</div>



<script>

 // API base URL and access token for Shopify API
const API_BASE_URL = '/admin/api/2024-01';
const ACCESS_TOKEN = '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';

// Custom element class for displaying related posts
class RelatedPosts extends HTMLElement {
  constructor() {
    super();
    // Fetch the product ID from the element's attributes
    this.productId = this.getAttribute('product-id');

    // Initialize the component when it becomes visible in the viewport
    window.theme.initWhenVisible({
      threshold: 0.5,
      callback: this.init.bind(this), // Ensure 'this' context is preserved
      element: this // The custom element itself
    });
  }

  // Initializes the component by fetching related blogs
  async init() {
    await this.fetchBlogs();
  }

  // Generic API fetch function for making requests to the Shopify API
  async fetchShopifyAPI(endpoint, options = {}) {
    try {
      const response = await fetch(`${API_BASE_URL}${endpoint}`, {
        ...options,
        headers: {
          'Content-Type': 'application/json',
          'X-Shopify-Access-Token': ACCESS_TOKEN,
          ...options.headers,
        },
      });
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      return await response.json();
    } catch (error) {
      console.error(`Error making API call to ${endpoint}:`, error);
      throw error;
    }
  }

  // Fetches list of blogs from the Shopify API
  async fetchBlogs() {
    try {
      const data = await this.fetchShopifyAPI('/blogs.json');
      const blogs = data.blogs;
      // Fetch related product metafields for each blog
      await this.fetchProductMetafield(blogs);
    } catch (error) {
      console.error('Error fetching blogs:', error);
    }
  }

  // Fetches product metafields to find related post handles
  async fetchProductMetafield(blogs) {
    const productId = this.productId;
    try {
      const data = await this.fetchShopifyAPI(`/products/${productId}/metafields.json`);
      const relatedPostHandlesString = data.metafields.find(metafield => metafield.key === 'related_post_handles').value;
      const relatedPostHandles = JSON.parse(relatedPostHandlesString);
      blogs.forEach(blog => {
        this.fetchRelatedPosts(blog.id, blog.handle, relatedPostHandles);
      });
    } catch (error) {
      console.error('Error fetching product metafield:', error);
    }
  }

  // Fetches related posts for each blog based on related post handles
  async fetchRelatedPosts(blogId, blogHandle, relatedPostHandles) {
    try {
      const data = await this.fetchShopifyAPI(`/blogs/${blogId}/articles.json`);
      const articles = data.articles;
      // Display the related articles on the page
      this.displayRelatedArticles(articles, blogHandle, relatedPostHandles);
    } catch (error) {
      console.error('Error fetching related posts:', error);
    }
  }

  // Generates HTML for related articles and appends it to the element
  displayRelatedArticles(articles, blogHandle, relatedPostHandles) {
    const relatedArticlesHTML = articles.reduce((acc, article) => {
      const modifiedArticleHandle = article.handle.split('/').pop();
      if (relatedPostHandles.includes(modifiedArticleHandle)) {
        const articleURL = `/blogs/${blogHandle}/${article.handle}`;
        return acc + `
          <a href="${articleURL}" id="${article.id}" class="related-posts__articles grid__item full-unstyled-link">
              <img src="${article.image.src}" class="img-fluid" alt="${article.title}" />
              <h3>${article.title}</h3>
          </a>
        `;
      }
      return acc;
    }, '');

    // Append the related articles HTML to the custom element
    this.innerHTML += relatedArticlesHTML;
  }
}

// Define the 'related-posts' custom element
customElements.define('related-posts', RelatedPosts);
</script>
{% endcomment %}


{% schema %}
{
  "name": "Related Blog Posts",
  "tag": "section",
  "limit": 1,
  "class": "section related-post",
  "enabled_on": {
    "templates": ["product"]
  },
  "settings": [
    {
      "type": "range",
      "id": "page_width",
      "min": 1000,
      "max": 1920,
      "step": 10,
      "default": 1200,
      "unit": "px",
      "label": "t:settings_schema.layout.settings.page_width.label"
    },

    {
      "type": "checkbox",
      "id": "use_section_width",
      "label": "Use section width",
      "default": false
    },

    {
      "type": "text",
      "id": "title",
      "default": "Related Post",
      "label": "Title"
    },

    {
      "type": "text",
      "id": "description",
      "default": "Read ours popular posts",
      "label": "Description"
    },

    {
      "type": "blog",
      "id": "blog",
      "label": "Choose default blog"
    },
    {
      "type": "range",
      "id": "post_limit",
      "min": 2,
      "max": 4,
      "step": 1,
      "default": 2,
      "label": "Posts limit"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Section padding top",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Section padding bottom",
      "default": 36
    }
  ],
  "presets": [
    {
      "name": "Related Blog Posts"
    }
  ]
}
{% endschema %}
