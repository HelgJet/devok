<style>

  .deck-of-cards-section {
      max-width: 670px;
  margin: 3rem auto;
    min-height: 382px;
}
 .deck-of-cards-section .buttons {
  display: flex;
  justify-content: center;
  margin-bottom: 20px;
}

.deck-of-cards-section .step-btn {
  padding: 10px 20px;
  margin: 0 5px;
  cursor: pointer;
}

.deck-of-cards-section .step-content {
  display: none;
  text-align: center;
}

.deck-of-cards-section .step-content.active {
  display: block;
}

.flip-card {
  /* width: 150px; */
  height: 220px;
  margin: 0 auto;
  perspective: 1000px; /* Необхідне для фліп-анімації */
}

.flip-card-inner {
  position: relative;
  width: 100%;
  height: 100%;
  text-align: center;
  transition: transform 0.8s;
  transform-style: preserve-3d;
}

.flip-card.flipped .flip-card-inner {
  transform: rotateY(180deg);
}

.flip-card-front,
.flip-card-back {
  position: absolute;
  width: 100%;
  height: 100%;
  backface-visibility: hidden;
}

.flip-card-back {
  transform: rotateY(180deg);
}

#shuffle-container {
  position: relative;
  width: 300px;
  height: 300px;
  margin: 20px auto;
  background-color: #fff;
  border: 1px solid #ccc;
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  align-items: center;
}

.card.shuffle-card {
  position: absolute;
  width: 70px;
  height: 100px;
  transition: transform 1s ease-in-out;
}

.shuffling .shuffle-card {
  animation: shuffle-animation 0.5s ease-in-out infinite alternate;
}

@keyframes shuffle-animation {
  from {
    transform: translate(10px, 10px) rotate(15deg);
  }
  to {
    transform: translate(-10px, -10px) rotate(-15deg);
  }
}



</style>


<div id="deck-of-cards-section" class="deck-of-cards-section">
  <div class="buttons">
    <button class="step-btn" data-step="1">Step 1</button>
    <button class="step-btn" data-step="2" onclick="shuffleDeck()">Step 2: Shuffle Deck</button>
    <button class="step-btn" data-step="3">Step 3</button>
  </div>

  <div class="step-content step-1 active">
    <div class="card flip-card" onclick="flipCard(this, 1)">
      <div class="flip-card-inner">
        <div class="flip-card-front">
             <img src="https://deckofcardsapi.com/static/img/back.png" alt="Card back" class="card-back">
        </div>
        <div class="flip-card-back">
          <img id="step1-card" src="" alt="Card Front">
        </div>
      </div>
    </div>
  </div>

  <div class="step-content step-2">
    <div id="shuffle-container" class="shuffle-container">
      <!-- Cards will be displayed here -->
    </div>
  </div>

  <div class="step-content step-3">
    <div class="card flip-card" onclick="flipCard(this, 3)">
      <div class="flip-card-inner">
        <div class="flip-card-front">
      <img src="https://deckofcardsapi.com/static/img/back.png" alt="Card back" class="card-back">
        </div>
        <div class="flip-card-back">
          <img id="step3-card" src="" alt="Card Front">
        </div>
      </div>
    </div>
  </div>
</div>


<script>
document.addEventListener('DOMContentLoaded', function() {
  const buttons = document.querySelectorAll('.step-btn');
  const stepContents = document.querySelectorAll('.step-content');
  const step1Card = document.getElementById('step1-card');
  const step3Card = document.getElementById('step3-card');
  const shuffleContainer = document.getElementById('shuffle-container');

  let isCardFlipping = false; // Для запобігання швидкому кліканню

  // Навігація між кроками
  buttons.forEach(button => {
    button.addEventListener('click', function() {
      const step = this.dataset.step;

      stepContents.forEach(content => {
        content.classList.remove('active');
      });

      document.querySelector(`.step-${step}`).classList.add('active');
    });
  });

  // Перевертання карт на кроках 1 і 3
  window.flipCard = function(element, step) {
    if (isCardFlipping) return; // Якщо перевертання вже відбувається, ігноруємо наступні кліки
    isCardFlipping = true;

    element.classList.toggle('flipped');
    const cardElement = step === 1 ? step1Card : step3Card;

    fetchCard(cardElement).finally(() => {
      setTimeout(() => {
        isCardFlipping = false; // Дозволити перевертання через 1 секунду
      }, 1000);
    });
  };

  // Отримання нової карти
  function fetchCard(cardElement) {
    return fetch('https://deckofcardsapi.com/api/deck/new/draw/?count=1')
      .then(response => response.json())
      .then(data => {
        cardElement.src = data.cards[0].image;
      })
      .catch(error => console.error('Error fetching card:', error));
  }

  // Перетасовка колоди карт з анімацією
  window.shuffleDeck = function() {
    fetch('https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1')
      .then(response => response.json())
      .then(data => {
        return fetch(`https://deckofcardsapi.com/api/deck/${data.deck_id}/draw/?count=54`);
      })
      .then(response => response.json())
      .then(data => {
        shuffleContainer.innerHTML = '';

        data.cards.forEach(card => {
          const cardElement = document.createElement('div');
          cardElement.className = 'card shuffle-card';
          cardElement.style.transform = `translate(${Math.random() * 100}px, ${Math.random() * 100}px) rotate(${Math.random() * 360}deg)`;
          cardElement.innerHTML = `
            <img src="https://deckofcardsapi.com/static/img/back.png" alt="Card back" class="card-back">
          `;
          shuffleContainer.appendChild(cardElement);
        });

        // Запуск анімації
        setTimeout(() => {
          shuffleContainer.classList.add('shuffling');
          const cards = shuffleContainer.querySelectorAll('.shuffle-card');

          cards.forEach((card, index) => {
            setTimeout(() => {
              card.style.transform = `translate(0px, 0px) rotate(0deg)`;
            }, index * 50); // Затримка для кожної карти
          });

          setTimeout(() => {
            shuffleContainer.classList.remove('shuffling');
          }, 3000); // Тривалість анімації
        }, 100);
      })
      .catch(error => console.error('Error shuffling deck:', error));
  };
});


</script>



{% schema %}
{
  "name": "Deck of Cards New Section",
  "settings": [],
  "presets": [
    {
      "name": "Deck of Cards New Section"
    }
  ]
}
{% endschema %}