<style>

   .card-game-section  {
      max-width: 670px;
  margin: 3rem auto;
    min-height: 382px;
}
.card-game-section {
  text-align: center;
}

.buttons {
  display: flex;
  justify-content: center;
  margin-bottom: 20px;
}

.step-btn {
  padding: 10px 20px;
  margin: 0 5px;
  cursor: pointer;
}

.step-content {
  display: none;
}

.step-content.active {
  display: block;
}

.flip-card {
  perspective: 1000px;
  /* width: 100px;  */
  height: 140px; 
  margin: 20px auto;
}

.flip-card-inner {
  position: relative;
  width: 100%;
  height: 100%;
  text-align: center;
  transition: transform 0.8s;
  transform-style: preserve-3d;
}

.flip-card.flipped .flip-card-inner {
  transform: rotateY(180deg);
}

.flip-card-front,
.flip-card-back {
  position: absolute;
  width: 100%;
  height: 100%;
  backface-visibility: hidden;
}

.flip-card-back {
  transform: rotateY(180deg);
}

#shuffle-canvas {
  display: block;
  margin: 0 auto;
  background-color: #fff;
  border: 1px solid #ccc;
  width: 300px; /* Зменшений розмір canvas */
  height: 300px; /* Зменшений розмір canvas */
}

.mini-card {
  width: 40px;
  height: 60px;
}

#result-message {
  font-size: 18px;
  margin-top: 10px;
}

#restart-btn {
  margin-top: 20px;
  padding: 10px 20px;
  cursor: pointer;
}


</style>


<div id="card-game-section" class="card-game-section">
  <div class="buttons">
    <button class="step-btn" data-step="1" id="step1-btn">Step 1</button>
    <button class="step-btn" data-step="2" id="step2-btn">Step 2</button>
    <button class="step-btn" data-step="3" id="step3-btn" disabled>Step 3</button>
  </div>

  <div class="step-content step-1 active" id="step1-content">
    <div class="card flip-card" onclick="selectCard(this)">
      <div class="flip-card-inner">
        <div class="flip-card-front">
          <img src="https://deckofcardsapi.com/static/img/back.png" alt="Card back" class="card-back">
        </div>
        <div class="flip-card-back">
          <img id="step1-card" src="" alt="Card front">
        </div>
      </div>
    </div>
  </div>

  <div class="step-content step-2" id="step2-content">
    <canvas id="shuffle-canvas" width="300" height="300"></canvas>
  </div>

  <div class="step-content step-3" id="step3-content">
    <div id="step3-cards-container">
      <div class="card flip-card" onclick="checkCard(this, 1)">
        <div class="flip-card-inner">
          <div class="flip-card-front">
            <img src="https://deckofcardsapi.com/static/img/back.png" alt="Card back" class="card-back">
          </div>
          <div class="flip-card-back">
            <img id="step3-card1" src="" alt="Card front">
          </div>
        </div>
      </div>
      <div class="card flip-card" onclick="checkCard(this, 2)">
        <div class="flip-card-inner">
          <div class="flip-card-front">
            <img src="https://deckofcardsapi.com/static/img/back.png" alt="Card back" class="card-back">
          </div>
          <div class="flip-card-back">
            <img id="step3-card2" src="" alt="Card front">
          </div>
        </div>
      </div>
      <div class="card flip-card" onclick="checkCard(this, 3)">
        <div class="flip-card-inner">
          <div class="flip-card-front">
            <img src="https://deckofcardsapi.com/static/img/back.png" alt="Card back" class="card-back">
          </div>
          <div class="flip-card-back">
            <img id="step3-card3" src="" alt="Card front">
          </div>
        </div>
      </div>
    </div>
    <p id="result-message"></p>
    <button id="restart-btn" onclick="restartGame()">Play Again</button>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const step1Btn = document.getElementById('step1-btn');
  const step2Btn = document.getElementById('step2-btn');
  const step3Btn = document.getElementById('step3-btn');
  const step1Card = document.getElementById('step1-card');
  const canvas = document.getElementById('shuffle-canvas');
  const ctx = canvas.getContext('2d');
  const stepContents = document.querySelectorAll('.step-content');
  const resultMessage = document.getElementById('result-message');
  const restartBtn = document.getElementById('restart-btn');

  let selectedCard;
  let tries = 0;
  let cards = [];
  let animationFrameId;
  let isCardFlipping = false; 

  // Вибір карти на першому кроці
  window.selectCard = function(element) {
    if (isCardFlipping) return;
    isCardFlipping = true;

    fetchCard(step1Card).then(() => {
      element.classList.toggle('flipped');
      setTimeout(() => {
        isCardFlipping = false;
        selectedCard = step1Card.src;
      }, 300);
    });
  };

  // Перехід на другий крок
  step2Btn.addEventListener('click', function() {
    if (!selectedCard) {
      alert('Please select a card first.');
      return;
    }

    step1Btn.disabled = true;
    step1Btn.innerHTML = `<img src="${selectedCard}" alt="Selected Card" class="mini-card">`;
    shuffleDeck();
  });

  // Перетасовка колоди карт з анімацією на canvas
  window.shuffleDeck = function() {
    fetch('https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1')
      .then(response => response.json())
      .then(data => {
        return fetch(`https://deckofcardsapi.com/api/deck/${data.deck_id}/draw/?count=54`);
      })
      .then(response => response.json())
      .then(data => {
        cards = data.cards.map(card => ({
          image: new Image(),
          x: Math.random() * (canvas.width - 100),
          y: Math.random() * (canvas.height - 140),
          rotation: Math.random() * 360,
        }));

        cards.forEach(card => {
          card.image.src = "https://deckofcardsapi.com/static/img/back.png";
        });

        animateShuffling().then(() => {
          step3Btn.disabled = false;
          switchToStep(3);
        });
      })
      .catch(error => console.error('Error shuffling deck:', error));
  };

  // Анімація перетасовки карт
  function animateShuffling() {
    return new Promise((resolve) => {
      let frameCount = 0;
      function drawFrame() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);

        cards.forEach(card => {
          ctx.save();
          ctx.translate(card.x + 50, card.y + 70);
          ctx.rotate(card.rotation * Math.PI / 180);
          ctx.translate(-50, -70);
          ctx.drawImage(card.image, 0, 0, 100, 140);
          ctx.restore();
        });

        cards.forEach(card => {
          card.x += (canvas.width / 2 - card.x - 50) * 0.1;
          card.y += (canvas.height / 2 - card.y - 70) * 0.1;
          card.rotation += (0 - card.rotation) * 0.1;
        });

        frameCount++;
        if (frameCount < 60) {
          animationFrameId = requestAnimationFrame(drawFrame);
        } else {
          cancelAnimationFrame(animationFrameId);
          resolve();
        }
      }
      drawFrame();
    });
  }

  // Вибір карти на третьому кроці
  window.checkCard = function(element, cardNumber) {
    if (tries >= 3) return;

    const cardElement = document.getElementById(`step3-card${cardNumber}`);
    fetchCard(cardElement).then(() => {
      element.classList.toggle('flipped');
      tries++;
      if (cardElement.src === selectedCard) {
        resultMessage.textContent = 'You win!';
        step3Btn.disabled = true;
      } else if (tries >= 3) {
        resultMessage.textContent = 'You lose!';
        step3Btn.disabled = true;
      }
    });
  };

  // Отримання нової карти
  function fetchCard(cardElement) {
    return fetch('https://deckofcardsapi.com/api/deck/new/draw/?count=1')
      .then(response => response.json())
      .then(data => {
        cardElement.src = data.cards[0].image;
      })
      .catch(error => console.error('Error fetching card:', error));
  }

  // Переключення між кроками
  function switchToStep(stepNumber) {
    stepContents.forEach(content => {
      content.classList.remove('active');
    });
    document.getElementById(`step${stepNumber}-content`).classList.add('active');
  }

  // Перезапуск гри
  window.restartGame = function() {
    selectedCard = null;
    tries = 0;
    resultMessage.textContent = '';
    step1Btn.disabled = false;
    step1Btn.innerHTML = 'Step 1';
    step3Btn.disabled = true;
    switchToStep(1);
  };

  switchToStep(1);
});


</script>



{% schema %}
{
  "name": "Deck of Cards New Section",
  "settings": [],
  "presets": [
    {
      "name": "Deck of Cards New Section"
    }
  ]
}
{% endschema %}