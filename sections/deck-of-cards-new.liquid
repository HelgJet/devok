<style>

   .card-game-section  {
      max-width: 670px;
  margin: 3rem auto;
    min-height: 382px;
}
.card-game-section .buttons {
  display: flex;
  justify-content: center;
  margin-bottom: 20px;
}

.card-game-section .step-btn {
  padding: 10px 20px;
  margin: 0 5px;
  cursor: pointer;
  display: none; /* Спочатку всі кнопки приховані */
}

.card-game-section .step-content {
  display: none;
  text-align: center;
}

.card-game-section .step-content.active {
  display: block;
}

.flip-card {
  width: 300px; /* Збільшення розміру карт в два рази */
  height: 440px; /* Збільшення розміру карт в два рази */
  margin: 0 auto;
  perspective: 1000px; /* Необхідне для фліп-анімації */
}

#shuffle-canvas {
  display: block;
  margin: 20px auto;
  background-color: #fff;
  border: 1px solid #ccc;
  width: 800px; /* Збільшення розміру canvas в два рази */
  height: 800px; /* Збільшення розміру canvas в два рази */
}

.flip-card-inner {
  position: relative;
  width: 100%;
  height: 100%;
  text-align: center;
  transition: transform 0.8s;
  transform-style: preserve-3d;
}

.flip-card.flipped .flip-card-inner {
  transform: rotateY(180deg);
}

.flip-card-front,
.flip-card-back {
  position: absolute;
  width: 100%;
  height: 100%;
  backface-visibility: hidden;
}

.flip-card-back {
  transform: rotateY(180deg);
}

#chosen-card-summary img {
  width: 100px;
  height: auto;
}

</style>


<div id="card-game-section" class="card-game-section">
  <div class="buttons">
    <button class="step-btn" data-step="1">Step 1: Choose a Card</button>
    <button class="step-btn" data-step="2" onclick="startShuffle()">Step 2: Shuffle Deck</button>
    <button class="step-btn" data-step="3">Step 3: Find Your Card</button>
    <button id="restart-btn" class="step-btn" style="display: none;" onclick="restartGame()">Restart Game</button>
  </div>

  <div class="step-content step-1 active">
    <div class="card flip-card" onclick="flipCard(this)">
      <div class="flip-card-inner">
        <div class="flip-card-front">
          <img src="https://deckofcardsapi.com/static/img/back.png" alt="Card back" class="card-back">
        </div>
        <div class="flip-card-back">
          <img id="chosen-card" src="" alt="Card front">
        </div>
      </div>
    </div>
  </div>

  <div class="step-content step-2">
    <canvas id="shuffle-canvas" width="400" height="400"></canvas>
  </div>

  <div class="step-content step-3">
    <div id="attempt-container">
      <!-- Cards for attempts will be rendered here -->
    </div>
  </div>
</div>

<div id="chosen-card-summary" style="display:none;">
  <p>Your chosen card:</p>
  <img id="chosen-card-thumbnail" src="" alt="Chosen card thumbnail">
</div>


<script>

document.addEventListener('DOMContentLoaded', function() {
  const buttons = document.querySelectorAll('.step-btn');
  const stepContents = document.querySelectorAll('.step-content');
  const chosenCardElement = document.getElementById('chosen-card');
  const chosenCardThumbnail = document.getElementById('chosen-card-thumbnail');
  const canvas = document.getElementById('shuffle-canvas');
  const ctx = canvas.getContext('2d');
  const attemptContainer = document.getElementById('attempt-container');
  const restartBtn = document.getElementById('restart-btn');
  const chosenCardSummary = document.getElementById('chosen-card-summary');

  let cards = [];
  let animationFrameId;
  let isCardFlipping = false;
  let chosenCard = null;
  let attemptsLeft = 3;

  // Навігація між кроками
  buttons.forEach(button => {
    button.addEventListener('click', function() {
      const step = this.dataset.step;

      stepContents.forEach(content => {
        content.classList.remove('active');
      });

      document.querySelector(`.step-${step}`).classList.add('active');

      if (step == 2) {
        startShuffle();
      } else if (step == 3) {
        renderAttemptCards();
      }
    });
  });

  // Перевертання карт на кроці 1
  window.flipCard = function(element) {
    if (isCardFlipping) return; // Якщо перевертання вже відбувається, ігноруємо наступні кліки
    isCardFlipping = true;

    // Зміна зображення перед перевертанням
    fetchCard().then(card => {
      chosenCard = card; // Зберігаємо вибрану карту
      chosenCardElement.src = card.image;
      chosenCardThumbnail.src = card.image;

      element.classList.toggle('flipped'); // Початок перевертання
    });

    // Після завершення анімації дозволити наступне перевертання
    element.querySelector('.flip-card-inner').addEventListener('transitionend', function() {
      setTimeout(() => {
        isCardFlipping = false; // Дозволити перевертання після завершення анімації
        buttons[1].style.display = 'block'; // Відобразити кнопку для кроку 2
        chosenCardSummary.style.display = 'block'; // Показати мініатюру вибраної карти
      }, 300);
    }, { once: true });
  };

  // Отримання нової карти
  function fetchCard() {
    return fetch('https://deckofcardsapi.com/api/deck/new/draw/?count=1')
      .then(response => response.json())
      .then(data => data.cards[0])
      .catch(error => console.error('Error fetching card:', error));
  }

  // Перетасовка колоди карт з анімацією на canvas
  window.startShuffle = function() {
    fetch('https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1')
      .then(response => response.json())
      .then(data => {
        return fetch(`https://deckofcardsapi.com/api/deck/${data.deck_id}/draw/?count=54`);
      })
      .then(response => response.json())
      .then(data => {
        cards = data.cards.map(card => ({
          image: new Image(),
          x: Math.random() * (canvas.width - 280), // Збільшення розміру карт в два рази
          y: Math.random() * (canvas.height - 400), // Збільшення розміру карт в два рази
          rotation: Math.random() * 360,
          code: card.code,
        }));

        cards.forEach(card => {
          card.image.src = "https://deckofcardsapi.com/static/img/back.png";
        });

        animateShuffling();
      })
      .catch(error => console.error('Error shuffling deck:', error));
  };

  // Анімація перетасовки карт
  function animateShuffling() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    cards.forEach(card => {
      ctx.save();
      ctx.translate(card.x + 140, card.y + 200); // Збільшення розміру карт в два рази
      ctx.rotate(card.rotation * Math.PI / 180);
      ctx.translate(-140, -200); // Збільшення розміру карт в два рази
      ctx.drawImage(card.image, 0, 0, 280, 400); // Збільшення розміру карт в два рази
      ctx.restore();
    });

    cards.forEach(card => {
      card.x += (canvas.width / 2 - card.x - 140) * 0.1;
      card.y += (canvas.height / 2 - card.y - 200) * 0.1;
      card.rotation += (0 - card.rotation) * 0.1;
    });

    if (Math.abs(cards[0].x - canvas.width / 2 + 140) > 1 || Math.abs(cards[0].y - canvas.height / 2 + 200) > 1) {
      animationFrameId = requestAnimationFrame(animateShuffling);
    } else {
      cancelAnimationFrame(animationFrameId);
      setTimeout(() => {
        buttons[2].click(); // Автоматичний перехід до кроку 3 після завершення перетасовки
      }, 1000);
    }
  }

  // Відображення карт для спроб на кроці 3
  function renderAttemptCards() {
    attemptContainer.innerHTML = '';
    attemptsLeft = 3;

    cards.forEach(card => {
      const cardElement = document.createElement('div');
      cardElement.className = 'card flip-card';
      cardElement.innerHTML = `
        <div class="flip-card-inner" onclick="attemptToFindCard('${card.code}', this)">
          <div class="flip-card-front">
            <img src="https://deckofcardsapi.com/static/img/back.png" alt="Card back" class="card-back">
          </div>
          <div class="flip-card-back">
            <img src="${card.image.src}" alt="Card front">
          </div>
        </div>`;
      attemptContainer.appendChild(cardElement);
    });
  }

  // Спроба знайти вибрану карту на кроці 3
  window.attemptToFindCard = function(cardCode, element) {
    if (attemptsLeft <= 0) return;

    element.querySelector('.flip-card-inner').classList.toggle('flipped');

    if (cardCode === chosenCard.code) {
      alert('Congratulations! You found your card!');
      restartBtn.style.display = 'block';
    } else {
      attemptsLeft--;
      if (attemptsLeft === 0) {
        alert('Sorry, no more attempts left. Try again!');
        restartBtn.style.display = 'block';
      }
    }
  };

  // Перезапуск гри
  window.restartGame = function() {
    chosenCard = null;
    buttons[1].style.display = 'none';
    restartBtn.style.display = 'none';
    chosenCardSummary.style.display = 'none';
    stepContents.forEach(content => {
      content.classList.remove('active');
    });
    stepContents[0].classList.add('active');
  };
});


</script>



{% schema %}
{
  "name": "Deck of Cards New Section",
  "settings": [],
  "presets": [
    {
      "name": "Deck of Cards New Section"
    }
  ]
}
{% endschema %}