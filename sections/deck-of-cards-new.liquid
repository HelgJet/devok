<style>

   .card-game-section  {
      max-width: 670px;
  margin: 3rem auto;
    min-height: 382px;
}

  .card-game-section .buttons {
  display: flex;
  justify-content: center;
  margin-bottom: 20px;
}

.card-game-section .step-btn {
  padding: 10px 20px;
  margin: 0 5px;
  cursor: pointer;
}

.card-game-section .step-content {
  display: none;
  text-align: center;
}

.card-game-section .step-content.active {
  display: block;
}

.flip-card {
  width: 300px; /* Збільшення розміру карт в два рази */
  height: 440px; /* Збільшення розміру карт в два рази */
  margin: 0 auto;
  perspective: 1000px; /* Необхідне для фліп-анімації */
}

#shuffle-canvas {
  display: block;
  margin: 20px auto;
  background-color: #fff;
  border: 1px solid #ccc;
  width: 800px; /* Збільшення розміру canvas в два рази */
  height: 800px; /* Збільшення розміру canvas в два рази */
}

.flip-card-inner {
  position: relative;
  width: 100%;
  height: 100%;
  text-align: center;
  transition: transform 0.8s;
  transform-style: preserve-3d;
}

.flip-card.flipped .flip-card-inner {
  transform: rotateY(180deg);
}

.flip-card-front,
.flip-card-back {
  position: absolute;
  width: 100%;
  height: 100%;
  backface-visibility: hidden;
}

.flip-card-back {
  transform: rotateY(180deg);
}

#result-message {
  text-align: center;
  margin-top: 20px;
}


</style>


<div id="card-game-section" class="card-game-section">
  <div class="buttons">
    <button class="step-btn" data-step="1">Step 1: Choose a Card</button>
    <button class="step-btn" data-step="2" onclick="startShuffle()">Step 2: Shuffle Deck</button>
    <button class="step-btn" data-step="3">Step 3: Find the Card</button>
  </div>

  <div class="step-content step-1 active">
    <div class="card flip-card" onclick="chooseCard(this)">
      <div class="flip-card-inner">
        <div class="flip-card-front">
          <img src="https://deckofcardsapi.com/static/img/back.png" alt="Card back" class="card-back">
        </div>
        <div class="flip-card-back">
          <img id="step1-card" src="" alt="Card front">
        </div>
      </div>
    </div>
  </div>

  <div class="step-content step-2">
    <canvas id="shuffle-canvas" width="800" height="800"></canvas>
  </div>

  <div class="step-content step-3">
    <div class="card flip-card" onclick="tryCard(this)">
      <div class="flip-card-inner">
        <div class="flip-card-front">
          <img src="https://deckofcardsapi.com/static/img/back.png" alt="Card back" class="card-back">
        </div>
        <div class="flip-card-back">
          <img id="step3-card" src="" alt="Card front">
        </div>
      </div>
    </div>
  </div>

  <div id="result-message" style="display: none;">
    <h3 id="result-text"></h3>
  </div>
</div>


<script>

document.addEventListener('DOMContentLoaded', function() {
  const buttons = document.querySelectorAll('.step-btn');
  const stepContents = document.querySelectorAll('.step-content');
  const step1Card = document.getElementById('step1-card');
  const step3Card = document.getElementById('step3-card');
  const canvas = document.getElementById('shuffle-canvas');
  const ctx = canvas.getContext('2d');
  const resultMessage = document.getElementById('result-message');
  const resultText = document.getElementById('result-text');

  let selectedCard = null;
  let cards = [];
  let attempts = 0;
  let maxAttempts = 3;
  let animationFrameId;
  let isCardFlipping = false;

  // Навігація між кроками
  buttons.forEach(button => {
    button.addEventListener('click', function() {
      const step = this.dataset.step;

      stepContents.forEach(content => {
        content.classList.remove('active');
      });

      document.querySelector(`.step-${step}`).classList.add('active');

      // Автоматичний перехід на крок 3 після перетасовки на кроці 2
      if (step === "2") {
        startShuffle();
      }
    });
  });

  // Вибір карти на першому кроці
  window.chooseCard = function(element) {
    if (isCardFlipping) return;
    isCardFlipping = true;

    fetchCard(step1Card).then(data => {
      selectedCard = data.cards[0];
      element.classList.toggle('flipped');
      isCardFlipping = false;
    });
  };

  // Перевертання карт на кроці 3
  window.tryCard = function(element) {
    if (isCardFlipping || attempts >= maxAttempts) return;
    isCardFlipping = true;
    attempts++;

    fetchCard(step3Card).then(data => {
      const chosenCard = data.cards[0];
      element.classList.toggle('flipped');

      if (chosenCard.code === selectedCard.code) {
        resultText.textContent = "You won! The card matches!";
        resultMessage.style.display = "block";
      } else if (attempts >= maxAttempts) {
        resultText.textContent = "You lost! No more attempts left.";
        resultMessage.style.display = "block";
      }

      setTimeout(() => {
        isCardFlipping = false;
      }, 300);
    });
  };

  // Отримання нової карти
  function fetchCard(cardElement) {
    return fetch('https://deckofcardsapi.com/api/deck/new/draw/?count=1')
      .then(response => response.json())
      .then(data => {
        cardElement.src = data.cards[0].image;
        return data;
      })
      .catch(error => console.error('Error fetching card:', error));
  }

  // Перетасовка колоди карт і автоматичний перехід на крок 3
  window.startShuffle = function() {
    fetch('https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1')
      .then(response => response.json())
      .then(data => {
        return fetch(`https://deckofcardsapi.com/api/deck/${data.deck_id}/draw/?count=54`);
      })
      .then(response => response.json())
      .then(data => {
        cards = data.cards.map(card => ({
          image: new Image(),
          x: Math.random() * (canvas.width - 280),
          y: Math.random() * (canvas.height - 400),
          rotation: Math.random() * 360,
        }));

        cards.forEach(card => {
          card.image.src = "https://deckofcardsapi.com/static/img/back.png";
        });

        animateShuffling(() => {
          // Після завершення анімації автоматично переходимо на крок 3
          buttons[2].click();
        });
      })
      .catch(error => console.error('Error shuffling deck:', error));
  };

  // Анімація перетасовки карт
  function animateShuffling(callback) {
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    cards.forEach(card => {
      ctx.save();
      ctx.translate(card.x + 140, card.y + 200);
      ctx.rotate(card.rotation * Math.PI / 180);
      ctx.translate(-140, -200);
      ctx.drawImage(card.image, 0, 0, 280, 400);
      ctx.restore();
    });

    cards.forEach(card => {
      card.x += (canvas.width / 2 - card.x - 140) * 0.1;
      card.y += (canvas.height / 2 - card.y - 200) * 0.1;
      card.rotation += (0 - card.rotation) * 0.1;
    });

    if (Math.abs(cards[0].x - canvas.width / 2 + 140) > 1 || Math.abs(cards[0].y - canvas.height / 2 + 200) > 1) {
      animationFrameId = requestAnimationFrame(() => animateShuffling(callback));
    } else {
      cancelAnimationFrame(animationFrameId);
      callback();
    }
  } 
});

</script>



{% schema %}
{
  "name": "Deck of Cards New Section",
  "settings": [],
  "presets": [
    {
      "name": "Deck of Cards New Section"
    }
  ]
}
{% endschema %}