<style>

  .deck-of-cards-section {
      max-width: 670px;
  margin: 3rem auto;
}
.deck-of-cards-section .buttons {
  display: flex;
  justify-content: center;
  margin-bottom: 20px;

}

.deck-of-cards-section .step-btn {
  padding: 10px 20px;
  margin: 0 5px;
  cursor: pointer;
}

.deck-of-cards-section .step-content {
  display: none;
}

.deck-of-cards-section .step-content.active {
  display: block;
}

#shuffle-canvas {
  display: block;
  margin: 0 auto;
  background-color: #fff;
  border: 1px solid #ccc;
}

.flip-card {
  perspective: 1000px;
  width: 150px;
  height: 220px;
  margin: 0 auto;
}

.flip-card-inner {
  position: relative;
  width: 100%;
  height: 100%;
  text-align: center;
  transition: transform 0.8s;
  transform-style: preserve-3d;
}

.flip-card.flipped .flip-card-inner {
  transform: rotateY(180deg);
}

.flip-card-front,
.flip-card-back {
  position: absolute;
  width: 100%;
  height: 100%;
  backface-visibility: hidden;
}

.flip-card-back {
  transform: rotateY(180deg);
}


</style>


<div id="deck-of-cards-section" class="deck-of-cards-section">
  <div class="buttons">
    <button class="step-btn" data-step="1">Step 1</button>
    <button class="step-btn" data-step="2" onclick="shuffleDeck()">Step 2: Shuffle Deck</button>
    <button class="step-btn" data-step="3">Step 3</button>
  </div>

  <div class="step-content step-1 active">
    <div class="card flip-card" onclick="flipCard(this, 1)">
      <div class="flip-card-inner">
        <div class="flip-card-front">
             <img src="https://deckofcardsapi.com/static/img/back.png" alt="Card back" class="card-back">
        </div>
        <div class="flip-card-back">
          <img id="step1-card" src="" alt="Card Front">
        </div>
      </div>
    </div>
  </div>

 <div class="step-content step-2">
    <canvas id="shuffle-canvas" width="400" height="400"></canvas>
  </div>

  <div class="step-content step-3">
    <div class="card flip-card" onclick="flipCard(this, 3)">
      <div class="flip-card-inner">
        <div class="flip-card-front">
      <img src="https://deckofcardsapi.com/static/img/back.png" alt="Card back" class="card-back">
        </div>
        <div class="flip-card-back">
          <img id="step3-card" src="" alt="Card Front">
        </div>
      </div>
    </div>
  </div>
</div>


<script>
document.addEventListener('DOMContentLoaded', function() {
  const buttons = document.querySelectorAll('.step-btn');
  const stepContents = document.querySelectorAll('.step-content');
  const step1Card = document.getElementById('step1-card');
  const step3Card = document.getElementById('step3-card');
  const canvas = document.getElementById('shuffle-canvas');
  const ctx = canvas.getContext('2d');

  let cards = [];
  let animationFrameId;

  // Навігація між кроками
  buttons.forEach(button => {
    button.addEventListener('click', function() {
      const step = this.dataset.step;

      stepContents.forEach(content => {
        content.classList.remove('active');
      });

      document.querySelector(`.step-${step}`).classList.add('active');
    });
  });

  // Перевертання карт на кроках 1 і 3
  window.flipCard = function(element, step) {
    element.classList.toggle('flipped');
    if (step === 1) {
      fetchCard(step1Card);
    } else if (step === 3) {
      fetchCard(step3Card);
    }
  };

  // Отримання нової карти
  function fetchCard(cardElement) {
    fetch('https://deckofcardsapi.com/api/deck/new/draw/?count=1')
      .then(response => response.json())
      .then(data => {
        cardElement.src = data.cards[0].image;
      })
      .catch(error => console.error('Error fetching card:', error));
  }

  // Перетасовка колоди карт з анімацією на canvas
  window.shuffleDeck = function() {
    fetch('https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1')
      .then(response => response.json())
      .then(data => {
        return fetch(`https://deckofcardsapi.com/api/deck/${data.deck_id}/draw/?count=54`);
      })
      .then(response => response.json())
      .then(data => {
        cards = data.cards.map(card => ({
          image: new Image(),
          x: Math.random() * (canvas.width - 70),
          y: Math.random() * (canvas.height - 100),
          rotation: Math.random() * 360,
        }));

        cards.forEach((card, index) => {
          card.image.src = "https://deckofcardsapi.com/static/img/back.png";
        });

        animateShuffling();
      })
      .catch(error => console.error('Error shuffling deck:', error));
  };

  // Анімація перетасовки карт
  function animateShuffling() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    cards.forEach(card => {
      ctx.save();
      ctx.translate(card.x + 35, card.y + 50);
      ctx.rotate(card.rotation * Math.PI / 180);
      ctx.translate(-35, -50);
      ctx.drawImage(card.image, 0, 0, 70, 100);
      ctx.restore();
    });

    // Зменьшення розкиду карт і зведення їх в одну колоду
    cards.forEach(card => {
      card.x += (canvas.width / 2 - card.x - 35) * 0.1;
      card.y += (canvas.height / 2 - card.y - 50) * 0.1;
      card.rotation += (0 - card.rotation) * 0.1;
    });

    if (Math.abs(cards[0].x - canvas.width / 2 + 35) > 1 || Math.abs(cards[0].y - canvas.height / 2 + 50) > 1) {
      animationFrameId = requestAnimationFrame(animateShuffling);
    } else {
      cancelAnimationFrame(animationFrameId);
    }
  }
});


</script>



{% schema %}
{
  "name": "Deck of Cards New Section",
  "settings": [],
  "presets": [
    {
      "name": "Deck of Cards New Section"
    }
  ]
}
{% endschema %}